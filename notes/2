1.术语
	1、VI :
		模块捕获视频图像,可对其做剪切、缩放等处理,并输出多路不同分辨率的图像数据。

	2、VDEC :
		解码模块对编码后的视频码流进行解码,并将解析后的图像数据送 VPSS 进行图像处理或直接送 VO 显示。可对 H264/MPEG4/MPEG2 格式的视频码流进行解
	码。

	3、VPSS :
		模块接收 VI 和解码模块发送过来的图像,可对图像进行去噪、图像增强、锐化等处理,并实现同源输出多路不同分辨率的图像数据用于编码、预览或抓拍。

	4、VENC：
	编码模块接收 VI 捕获并经 VPSS 处理后输出的图像数据,可叠加用户通过 Region模块设置的 OSD 图像,然后按不同协议进行编码并输出相应码流。


	5、VDA：
		模块接收 VI 的输出图像,并进行移动侦测和遮挡侦测,最后输出侦测分析结果。

	6、VO：
		模块接收 VPSS 处理后的输出图像,可进行播放控制等处理,最后按用户配置的输出协议输出给外围视频设备。

	7、AI：
		模块捕获音频数据,然后 AENC 模块支持按多种音频协议对其进行编码,最后输出音频码流。

	8、
		用户从网络或外围存储设备获取的音频码流可直接送给 ADEC 模块,ADEC 支持解码多种不同的音频格式码流,解码后数据送给 AO 模块即可播放声音。
.1

2.色彩空间
	(1)RGB
	(2)YUV
		YUV444：
			一个像素使用一对UV分量，单个像素占空间为：1byte(Y) + 1byte(U) + 1byte(V) = 3byte
		YUV422：
			两个像素共用一对UV分量，单个像素占空间为：1byte(Y) + 1/2byte(U) + 1/2byte(V) = 2byte
		YUV420：
			四个像素共用一对UV分量，单个像素占空间为：1byte(Y) + 1/4byte(U) + 1/4byte(V) = 1.5byte

		以YUV444举例
		packed:
			{{Y1U1V1},{Y2U2V2}.{Y3U3V3},{Y4U4V4}}
		planer:
			{{Y1Y2Y3Y4},{U1U2U3U4},{V1V2V3V4}}
		semiplaner:
			{{Y1Y2Y3Y4},{U1V1U2V2U3V3U4V4}}

		以YUV422举例
		packed:
			{{Y1U1V1},{Y2U1V1}.{Y3U2V2},{Y4U2V2}}
		planer:
			{{Y1Y2Y3Y4},{U1U2},{V1V2}}
		semiplaner:
			{{Y1Y2Y3Y4},{U1V1U2V2}}


.2

3.
	开始工作：
		使用信号SIGINT 与 SIGERM 结束ISP 与 SYS
	运行：
		./sample_venc 0 (0代表一路 1080P H264 加 一路VGA H264)

	进入主要的函数
	HI_S32 SAMPLE_VENC_1080P_CLASSIC(HI_VOID

-----step1: init sys variable-----------------------------------------------------
		变量初始化

		清空视频缓存池 stVbConf 的结构体，其类型名为hiVB_CONF_S

		进入函数1a
		{
			HI_S32 SAMPLE_COMM_VI_GetSizeBySensor(PIC_SIZE_E *penSize);
			目的：通过sensor的类型，返回支持的视频大小
		}

		进入函数1b
		{	
			HI_U32 SAMPLE_COMM_SYS_CalcPicVbBlkSize(VIDEO_NORM_E enNorm, PIC_SIZE_E enPicSize, PIXEL_FORMAT_E enPixFmt, HI_U32 u32AlignWidth);
			目的：计算出缓冲池大小

			创建stSize结构体 存放宽高大小

			进入函数1b1
			{
				HI_S32 SAMPLE_COMM_SYS_GetPicSize(VIDEO_NORM_E enNorm, PIC_SIZE_E enPicSize, SIZE_S *pstSize);
				目的根据enPicSize枚举变量，将指针pstSize的结构体成员 宽和高 赋值
			}	

			将视频的宽和高计算出视频缓冲池的大小u32VbSize返回
		}
		
		将得到的u32VbSize返回值 赋值到 缓冲池结构体变量stVbConf的u32BlkSize成员变量中，
		根据芯片的类型赋值 缓冲池结构体变量stVbConf的u32BlkCnt成员变量
		完成对视频缓冲池的大小以及数量的初始化

-------step2: mmp system init---------------------------------------------------
		媒体处理软件平台(Media Process Platform)初始化
		
		进入函数2a
		{	
			HI_S32 SAMPLE_COMM_SYS_Init(VB_CONF_S *pstVbConf);
			目的：传递上一步初始化完成的视频缓冲池变量stVbConf
			对mpp进行初始化，分配内存
			创建stSysConf结构体

			调用ko装载的退出函数
				HI_MPI_SYS_Exit();
				HI_MPI_VB_Exit();
				先 退出mpp系统 以及 释放视频缓冲池

			先设置VB，开启VB
				HI_S32 HI_MPI_VB_SetConf(const VB_CONF_S *pstVbConf);
				HI_S32 HI_MPI_VB_Init(HI_VOID)	

			对stSysConf赋值，设置SYS，再初始化SYS
				HI_S32 HI_MPI_SYS_SetConf(const MPP_SYS_CONF_S* pstSysConf);
				HI_S32 HI_MPI_SYS_Init(HI_VOID);


		}
-------step 3: start vi dev & chn to capture-----------------------------------------
		开启vi设备以及通道 去获取信息

		设置SAMPLE_VI_CONFIG_S创建的stViConfig结构体的变量 
		{
			SAMPLE_VI_MODE_E  enViMode;		视频规格：分辨率、帧数
			VIDEO_NORM_E  enNorm;			编码模式：PAL NTSC AUTO
			ROTATE_E enRotate;				翻转	：不翻转 90 180 270	
			SAMPLE_VI_CHN_SET_E enViChnSet;	镜像	：正常，左右镜像，上下镜像，上下左右镜像。 
			WDR_MODE_E  enWDRMode;			WDR 

		}
		进入函数3a
		{	
			HI_S32 SAMPLE_COMM_VI_StartVi(SAMPLE_VI_CONFIG_S* pstViConfig);
			创建SAMPLE_VI_MODE_E类型的enViMode枚举变量 也是pstViConfig里的enViMode变量;

			然后判断视频规格是否是senser支持的规格
				是：{
					进入函数3a1
						HI_S32 SAMPLE_COMM_VI_StartIspAndVi(SAMPLE_VI_CONFIG_S* pstViConfig)
						获取视频规格enViMode

						------step 1: mipi configure---------------------------------------------
							移动工业处理器接口mipi(Mobile Idustry Processor Interface) 	

							进入函数3a1a
							HI_S32 SAMPLE_COMM_VI_StartMIPI(SAMPLE_VI_CONFIG_S* pstViConfig)
							{
								进入3a1a1函数
								HI_S32 SAMPLE_COMM_VI_SetMipiAttr(SAMPLE_VI_CONFIG_S* pstViConfig)
							}
						-------step 2: configure sensor and ISP (include WDR mode)---------------
							配置sersor和ISP

							进入函数3a1b
							HI_S32 SAMPLE_COMM_ISP_Init(WDR_MODE_E  enWDRMode)
							{

							}
						--------step 3: run isp thread-------------------------------------------
							运行isp线程

							进入函数3a1c
							HI_S32 SAMPLE_COMM_ISP_Run()
						---------step 4 : config & start vicap dev------------------------------
							
							进入函数3a1d
							HI_S32 SAMPLE_COMM_VI_StartDev(VI_DEV ViDev, SAMPLE_VI_MODE_E enViMode)
							{
								调用函数3a1c1
								HI_S32 HI_MPI_VI_SetDevAttr(VI_DEV ViDev, const VI_DEV_ATTR_S *pstDevAttr);
								调用函数3a1c2
								HI_S32 HI_MPI_ISP_GetWDRMode(ISP_DEV IspDev, ISP_WDR_MODE_S *pstWDRMode);
								调用函数3a1c3
								HI_S32 HI_MPI_VI_SetWDRAttr(VI_DEV ViDev, const VI_WDR_ATTR_S *pstWDRAttr);
								调用函数3a1c4
								HI_S32 HI_MPI_VI_EnableDev(VI_DEV ViDev);

							}
						-----------Step 5: config & start vicap chn (max 1)-----------------------
									配置和开启vi获取通道
							进入函数3a1e
							HI_S32 SAMPLE_COMM_VI_StartChn(VI_CHN ViChn, RECT_S *pstCapRect, SIZE_S *pstTarSize, SAMPLE_VI_CONFIG_S* pstViConfig)
							{
								调用函数3a1d1
								HI_S32 HI_MPI_VI_SetChnAttr(VI_CHN ViChn, const VI_CHN_ATTR_S *pstAttr);
								调用函数3a1d2
								HI_S32 HI_MPI_VI_SetRotate(VI_CHN ViChn, const ROTATE_E enRotate);
					
								调用函数3a1d3
								HI_S32 HI_MPI_VI_EnableChn(VI_CHN ViChn);

							}
				}
				
				否：{
					进入函数3a2
				}

		}
			



		



	

.3








































